#!/usr/bin/env python3
# vim:foldmethod=marker

################################################################
# Copyright (c) 2021 Witalis Domitrz <witekdomitrz@gmail.com>
# MIT License
################################################################


import json
import sys
from itertools import islice
from multiprocessing import Process
from subprocess import PIPE, Popen, run

REFRESH_STATUS_CMD = ["killall", "-SIGUSR1", "i3status"]


def run_command(cmd, block=False):
    if not block:
        return Popen(cmd, stdout=PIPE, stderr=PIPE)
    else:
        return run(cmd, stdout=PIPE, stderr=PIPE)


# Config {{{

BLOCKS = [
    {"name": "editor", "full_text": "✍️"},
    {"name": "terminal", "full_text": "📄"},
    {"name": "menu", "full_text": "🔍"},
    {"name": "close", "full_text": "❌"}
]


class MEDIA_CONTROL_BLOCKS:
    PAUSE = {"name": "pause", "full_text": "⏸️"}
    PLAY = {"name": "play", "full_text": "▶️"}
    PREVIOUS = {"name": "previous-track", "full_text": "⏮️"}
    NEXT = {"name": "next-track", "full_text": "⏭️"}


def media_blocks():
    try:
        playerctl_title_process = run_command(
            ["playerctl", "metadata", "title"], block=True)
        playerctl_status_process = run_command(
            ["playerctl", "status"], block=True)
    except FileNotFoundError:
        return []

    if playerctl_title_process.returncode != 0 or playerctl_status_process.returncode != 0:
        return []

    title = playerctl_title_process.stdout.decode().strip()
    status = playerctl_status_process.stdout.decode().strip()
    control_icon = "⏸️" if status == "Playing" else "▶️"

    info_block = {
        "name": "media_info",
        "full_text": f"{title} {control_icon}",
        "color": "#BBFFBB" if status == "Playing" else "#BBBBFF"
    }

    return [info_block]


def add_no_internet_info(old_blocks):

    def is_internet_block(block):
        return block['name'] in ["ipv6", "wireless", "ethernet"]

    internet_blocks = list(filter(is_internet_block, old_blocks))

    if len(internet_blocks) == 0:
        return old_blocks

    if any(map(lambda x: len(x['full_text']) > 0, internet_blocks)):
        return old_blocks

    for i in range(len(old_blocks)):
        if is_internet_block(old_blocks[i]):
            old_blocks[i]['full_text'] = "⛔"
            break

    return old_blocks


def process_blocks(old_blocks):
    return media_blocks() + add_no_internet_info(old_blocks) + BLOCKS


def run_command_on_click(cmd, accepted_button=1, refresh=False):
    def helper(button, **_):
        if button != accepted_button:
            return
        if not refresh:
            run_command(cmd, block=False)
        else:
            run_command(cmd, block=True)
            run_command(REFRESH_STATUS_CMD)
    return helper


def handle_volume(button, **_):
    if button == 3:
        run_command("pavucontrol")
        return
    elif button in [1, 2]:
        cmd = ["pactl", "set-sink-mute", "@DEFAULT_SINK@", "toggle"]
    elif button in [4, 7]:
        cmd = ["pactl", "set-sink-volume", "@DEFAULT_SINK@", "+1%"]
    elif button in [5, 6]:
        cmd = ["pactl", "set-sink-volume", "@DEFAULT_SINK@", "-1%"]
    run_command(cmd, block=True)
    run_command(REFRESH_STATUS_CMD)


BUTTONS = {
    "terminal": run_command_on_click("x-terminal-emulator"),
    "menu": run_command_on_click(["gtk-launch", "run-menu"]),
    "time": run_command_on_click(["xdg-open", "https://calendar.google.com/"]),
    "tztime": run_command_on_click(["xdg-open", "https://calendar.google.com/"]),
    "ipv6": run_command_on_click("nm-connection-editor"),
    "wireless": run_command_on_click("nm-connection-editor"),
    "ethernet": run_command_on_click("nm-connection-editor"),
    "load": run_command_on_click("xfce4-taskmanager"),
    "cpu_temperature": run_command_on_click("xfce4-taskmanager"),
    "volume": handle_volume,
    "battery": run_command_on_click("xfce4-power-manager-settings"),
    "disk_info": run_command_on_click("nautilus"),
    "pause": run_command_on_click(["playerctl", "pause"], refresh=True),
    "play": run_command_on_click(["playerctl", "play"], refresh=True),
    "media_info": run_command_on_click(["playerctl", "play-pause"], refresh=True),
    "next-track": run_command_on_click(["playerctl", "next"], refresh=True),
    "previous-track": run_command_on_click(["playerctl", "previous"], refresh=True),
    "editor": run_command_on_click(["gtk-launch", "code"]),
    "close": run_command_on_click(["i3-msg", "kill"]),
}
# }}}

# Execution {{{
HEADER = {"version": 1, "click_events": True}


def show_status_text():
    i3status = Popen('i3status', stdout=PIPE)

    print(json.dumps(HEADER, separators=(',', ':')), flush=True)
    print('[', flush=True)

    # Discard the first two lines
    for line in map(bytes.decode, islice(i3status.stdout, 2, None)):
        data = process_blocks(json.loads(line.strip(',')))
        print((',' if line[0] == ',' else '') +
              json.dumps(data, separators=(',', ':')), flush=True)
    print(']', flush=True)


def handle_click(line):
    data = json.loads(line.strip(','))
    name = data["name"]
    if name in BUTTONS:
        BUTTONS[name](**data)


def clicks_handler():
    for line in islice(sys.stdin, 1, None):
        Process(target=handle_click, args=[line]).start()


def main():
    process = Process(target=show_status_text)
    process.start()
    clicks_handler()
    process.join()


if __name__ == '__main__':
    main()
# }}}
